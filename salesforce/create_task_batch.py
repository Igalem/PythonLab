import requests
import xml.etree.ElementTree as ET
import requests
import time


# Step 1: Authentication
INSTANCE_URL = 'https://xxxxxx.lightning.force.com/lightning/page/home'
USERNAME = "xxxxx"
PASSWORD = "xxxxx"
SECURITY_TOKEN = "xxxxxxxxxxxxxxxxxxxxx"
LOGIN_URL = 'https://login.salesforce.com'  # 'https://test.salesforce.com' for sandbox

# Authenticate and obtain session ID
soap_login_body = f"""<?xml version="1.0" encoding="utf-8"?>
<env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/">
    <env:Body>
        <n1:login xmlns:n1="urn:partner.soap.sforce.com">
            <n1:username>{USERNAME}</n1:username>
            <n1:password>{PASSWORD}{SECURITY_TOKEN}</n1:password>
        </n1:login>
    </env:Body>
</env:Envelope>"""

headers = {'Content-Type': 'text/xml', 'SOAPAction': 'login'}
response = requests.post(f"{LOGIN_URL}/services/Soap/u/51.0", headers=headers, data=soap_login_body)


session_id = 'xxxxxxxxxxxxxxxxxxxxxx' ##xml_response.find('.//{urn:partner.soap.sforce.com}sessionId').text
server_url = 'https://xxxxxx.my.salesforce.com/services/Soap/u/51.0/00DD0000000m3yx' ###xml_response.find('.//{urn:partner.soap.sforce.com}serverUrl').text
instance_url = server_url.split("/services")[0]

# # Create a Bulk API job for querying the Task entity
job_data = {
    'operation': 'query',
    'object': 'Task',
    'contentType': 'CSV'
}

job_headers = {
    'X-SFDC-Session': session_id,
    'Content-Type': 'application/json'
}

## ------------------------ For creating JOB ID -------------------------------------------------
## create batch job id
# response = requests.post(f"{instance_url}/services/async/51.0/job", headers=job_headers, json=job_data).json()

# job_id = response['id'] ## 750Q4000001kIfhIAE
# print(f"Created Job with ID: {job_id}")
## ----------------------------------------------------------------------------------------------

JOB_ID = '750Q4000001kIfhIAE'
API_VERSION = '51.0'

SOQL_QUERY = "SELECT id, CreatedDate, CreatedById, status, alert_type__c, alert_sub_type__c, alert_reason__c," \
            "alert_description__c, alert_resolved__c, data_source_link__c, resolution_type__c, resolution_action__c," \
            "resolution_further_details__c, WhatId, OwnerId, subject, priority, IsDeleted, IsClosed, " \
            "lastmodifieddate, lastmodifiedbyid, CompletedDateTime, type FROM task limit 1000" ## description

# Add Batches to the Job: Submit the SOQL query as a batch for this job
batch_headers = {
    'X-SFDC-Session': session_id,
    'Content-Type': 'text/csv'
}
response = requests.post(f"{instance_url}/services/async/{API_VERSION}/job/{JOB_ID}/batch", headers=batch_headers, data=SOQL_QUERY)
batch_id = response.text.split('<id>')[1].split('</id>')[0]
print(f"------ Batch ID: {batch_id}")

# # Poll for Batch Status
while True:
    response = requests.get(f"{instance_url}/services/async/{API_VERSION}/job/{JOB_ID}/batch/{batch_id}", headers=batch_headers)
    # print(response.text)
    status_root = ET.fromstring(response.text)
    state = status_root.find('.//{http://www.force.com/2009/06/asyncapi/dataload}state').text
    print(state)
    if state in ['Completed', 'Failed']:
        break
    time.sleep(10)  # Wait for 10 seconds before checking again


## Get the result_id generated by the batch_id
result_response = requests.get(f"{instance_url}/services/async/{API_VERSION}/job/{JOB_ID}/batch/{batch_id}/result", headers=batch_headers)
result_id = result_response.text.split('<result>')[1].split('</result>')[0]

## Get result from batch job and save it into CSV file
csv_response = requests.get(f"{instance_url}/services/async/{API_VERSION}/job/{JOB_ID}/batch/{batch_id}/result/{result_id}", headers=batch_headers)

with open("/tmp/result.csv", "w") as f:
    f.write(csv_response.text)

print("Results saved to result.csv")